name: Comprehensive Debug

on:
  push:
    branches: [ main ]

jobs:
  comprehensive-debug:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Environment Analysis
      run: |
        echo "=== SYSTEM INFO ==="
        uname -a
        echo "Node: $(node --version)"
        echo "NPM: $(npm --version)"
        echo "Working Directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Environment Variables:"
        env | grep -E "(NODE|NPM|CI|HOME)" | sort
        
        echo -e "\n=== REPOSITORY STATE ==="
        echo "Git status:"
        git status --porcelain
        echo "Files in root:"
        ls -la
        echo "Package.json exists: $(test -f package.json && echo 'YES' || echo 'NO')"
        echo "Package-lock.json exists: $(test -f package-lock.json && echo 'YES' || echo 'NO')"
        
        echo -e "\n=== SOURCE STRUCTURE ==="
        echo "Source directory structure:"
        find src -type f -name "*.ts" -o -name "*.tsx" -o -name "*.css" | head -20
        echo "TypeScript config files:"
        find . -name "tsconfig*.json" -type f
        echo "Vite config files:"
        find . -name "vite.config.*" -type f
        
    - name: Dependency Installation with Full Logging
      run: |
        echo "=== DEPENDENCY INSTALLATION ==="
        echo "Before install - node_modules exists: $(test -d node_modules && echo 'YES' || echo 'NO')"
        
        echo "Applying Rollup fix - removing package-lock.json and node_modules..."
        rm -rf node_modules package-lock.json
        
        echo "Running npm install to regenerate lock file..."
        npm install 2>&1 | tee npm-install.log
        
        echo "Running npm ci for clean install..."
        npm ci --verbose 2>&1 | tee -a npm-install.log
        
        echo "After install - node_modules exists: $(test -d node_modules && echo 'YES' || echo 'NO')"
        echo "node_modules size: $(du -sh node_modules 2>/dev/null || echo 'N/A')"
        
        echo "Key dependencies installed:"
        npm list --depth=0 2>/dev/null | grep -E "(typescript|vite|vitest|eslint)" || echo "No key deps found"
        
    - name: TypeScript Compilation Test
      run: |
        echo "=== TYPESCRIPT COMPILATION ==="
        echo "Testing TypeScript compilation directly..."
        
        # Test if TypeScript can compile without errors
        npx tsc --noEmit --project tsconfig.app.json 2>&1 | tee typescript-errors.log || {
          echo "TypeScript compilation failed!"
          echo "Error log:"
          cat typescript-errors.log
          exit 1
        }
        
        echo "TypeScript compilation successful!"
        
    - name: Lint Test with Detailed Output
      run: |
        echo "=== ESLINT TEST ==="
        echo "Running linter with maximum verbosity..."
        
        npm run lint 2>&1 | tee lint-output.log || {
          echo "Lint failed!"
          echo "Lint output:"
          cat lint-output.log
          echo "ESLint config:"
          find . -name "eslint.config.*" -type f -exec cat {} \;
          exit 1
        }
        
        echo "Linting successful!"
        
    - name: Test Execution with Detailed Output
      run: |
        echo "=== VITEST TEST ==="
        echo "Running tests with maximum verbosity..."
        
        npm test 2>&1 | tee test-output.log || {
          echo "Tests failed!"
          echo "Test output:"
          cat test-output.log
          echo "Vitest config:"
          cat vitest.config.ts 2>/dev/null || echo "No vitest config found"
          exit 1
        }
        
        echo "Tests successful!"
        
    - name: Build Test with Detailed Output
      run: |
        echo "=== VITE BUILD TEST ==="
        echo "Running build with maximum verbosity..."
        
        npm run build 2>&1 | tee build-output.log || {
          echo "Build failed!"
          echo "Build output:"
          cat build-output.log
          echo "Vite config:"
          cat vite.config.ts 2>/dev/null || echo "No vite config found"
          exit 1
        }
        
        echo "Build successful!"
        echo "Build artifacts:"
        find ../dist -type f 2>/dev/null | head -10 || echo "No dist found"
        
    - name: Upload Logs on Failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: debug-logs
        path: |
          npm-install.log
          typescript-errors.log
          lint-output.log
          test-output.log
          build-output.log 